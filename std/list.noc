/*
List functions
*/

load std:stack
load seq
load std:bool

def len' = {
    [
        [[[]] [pop 0]]
        [[_] [1 swap popr pop dup len' +]]
    ] case
}

def len = {
    ---
    Get a list's length

    (example)
    [1 2 3] len => [3]
    ---
    dup len'
}

def findByIndex = {
    ---
    Find a element in a list with his index.

    (example)
    2 [[0 "A"] [1 "B"] [2 "C"]] findByIndex
    => ["C"]

    (or with the 'enumerate' function)
    2 ["A" "B" "C"] enumerate findByIndex
    ---
    swap dup 3 -1 rotNM
    [
        unquote 4 1 rotNM ==
        [
            [[True] [dup]]
            [[False] [swap pop dup]]
        ] case
    ] step
    popr pop popr pop
    unquote
}

def enumerate = { 
    ---
    Listing a list with a successive indexes

    (example)
    ["A" "B" "C"] enumerate
    => [[0 "A"] [1 "B"] [2 "C"]]
    ---
    -1 swap 
    [swap 1 + dup 3 1 rotNM quote swap quote cat swap] step 
    popr pop swap quote swap cat 
}

def runReverse = {
    dup [
        [[[]] [pop]]
        [[_] [
                popr quote swap
                3 1 rotNM
                cat swap
                runReverse
             ]]
    ] case
}

def reverse = {
    ---
    Reversing a list

    (example)
    [1 2 3] reverse => [3 2 1]
    ---
    [] swap runReverse
}

def runFilter = {
    swap dup 
    3 -1 rotNM dup
    4 2 rotNM
    [
        [[[]] [pop pop pop]]
        [[_] [
                popr dup 4 -1 rotNM unquote
                [pop swap]
                [quote 4 -1 rotNM swap <> 3 1 rotNM swap]
                3 -1 rotNM if
                runFilter
             ]]
    ] case
}

def filter = {
    ---
    Filtering a list with a function

    (example)
    [1 2 3] [1 >] filter => [2 3]
    ---

    swap reverse swap
    [] 3 1 rotNM
    runFilter
}

def concatN = {
    ---
    Concat N quotes

    (example)
    [a] [b] [c] 3 concatN => [a b c]
    [[0 1]] [[1 1]] 2 concatN => [[0 1] [1 1]]
    [] 0 concatN => []
    ---

    dup 1 >
    [
        [[True] [dup dup 2 + 1 rotNM 1 + dup dup 0 swap - rotNM 3 1 rotNM <> swap 1 - -1 rotNM 1 - concatN]]
        [[False] [pop]]
    ] case
}
